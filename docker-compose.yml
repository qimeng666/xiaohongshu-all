version: "3.8"

services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: xiaohongshu-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 1057555034
      MYSQL_DATABASE: user_service_db
      MYSQL_USER: root
      MYSQL_PASSWORD: 1057555034
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - xiaohongshu-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: xiaohongshu-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - xiaohongshu-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper (Kafka 依赖)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: xiaohongshu-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - xiaohongshu-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka 消息队列
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: xiaohongshu-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - xiaohongshu-network
    healthcheck:
      test:
        ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 用户服务
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: xiaohongshu-user-service
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/user_service_db?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1057555034
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      JWT_SECRET: "404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970"
      JWT_EXPIRATION: 900000
    networks:
      - xiaohongshu-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 笔记服务
  note-service:
    build:
      context: ./note-service
      dockerfile: Dockerfile
    container_name: xiaohongshu-note-service
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      user-service:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/notes_db?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1057555034
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      USER_SERVICE_URL: http://user-service:8081
      JWT_SECRET: "404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970"
    networks:
      - xiaohongshu-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Feed 服务
  feed-service:
    build:
      context: ./feed-service
      dockerfile: Dockerfile
    container_name: xiaohongshu-feed-service
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      user-service:
        condition: service_healthy
      note-service:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/feed_db?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1057555034
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      USER_SERVICE_URL: http://user-service:8081
      NOTE_SERVICE_URL: http://note-service:8082
    networks:
      - xiaohongshu-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# 数据卷
volumes:
  mysql_data:
  redis_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:

# 网络
networks:
  xiaohongshu-network:
    driver: bridge
